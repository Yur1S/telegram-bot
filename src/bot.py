from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import pandas as pd
import logging
import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import BOT_TOKEN, CHROME_OPTIONS, ADMIN_USERNAME
from src.scraper import ProductScraper
from src.report_generator import ReportGenerator
from src.user_manager import UserManager

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

WELCOME_MESSAGE = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –ì–ò–°–ü –∏ –ï–ê–≠–°.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
"""

class ProductSearchBot:
    def __init__(self):
        self.chrome_options = Options()
        for option in CHROME_OPTIONS:
            self.chrome_options.add_argument(option)
        
        self.scraper = ProductScraper(self.chrome_options)
        self.report_generator = ReportGenerator()
        self.user_manager = UserManager()
        
        if not self.user_manager.is_admin(ADMIN_USERNAME):
            self.user_manager.allowed_users["admins"].append(ADMIN_USERNAME)
            self.user_manager._save_users()

    async def check_access(self, update: Update) -> bool:
        user = update.effective_user
        if not self.user_manager.is_allowed(username=user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        return True

    async def welcome(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[KeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –û–ö–ü–î2", callback_data='search_okpd2'),
                InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é", callback_data='search_name')
            ],
            [InlineKeyboardButton("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data='search_combined')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )

    async def admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if not self.user_manager.is_admin(user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        command = context.args[0] if context.args else "help"
        if command == "add":
            if len(context.args) < 2:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin add username")
                return
            username = context.args[1]
            self.user_manager.add_user(username=username)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω")
        
        elif command == "remove":
            if len(context.args) < 2:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin remove username")
                return
            username = context.args[1]
            self.user_manager.remove_user(username=username)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω")
        
        elif command == "list":
            users = self.user_manager.allowed_users["usernames"]
            message = "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(users)
            await update.message.reply_text(message)
        
        else:
            help_text = """
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin add username - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin remove username - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            """
            await update.message.reply_text(help_text)

    async def search_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        query = update.callback_query
        await query.answer()
        
        if query.data == 'search_okpd2':
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2:")
            context.user_data['search_type'] = 'okpd2'
        elif query.data == 'search_name':
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")
            context.user_data['search_type'] = 'name'
        elif query.data == 'search_combined':
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
            context.user_data['search_type'] = 'combined'

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        if update.message.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
            await self.start(update, context)
            return

        if 'search_type' not in context.user_data:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return

        search_type = context.user_data['search_type']
        query = update.message.text

        await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")

        try:
            if search_type == 'okpd2':
                results = self.scraper.search_gisp(okpd2=query)
            elif search_type == 'name':
                results = self.scraper.search_gisp(name=query)
            elif search_type == 'combined':
                okpd2, name = [x.strip() for x in query.split(',', 1)]
                results = self.scraper.search_gisp(okpd2=okpd2, name=name)

            if not results:
                await update.message.reply_text("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            excel_report = self.report_generator.generate_excel_report(results)
            if excel_report:
                await update.message.reply_document(
                    document=excel_report,
                    filename='search_results.xlsx',
                    caption=f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}"
                )
            else:
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        finally:
            context.user_data.pop('search_type', None)

    def run(self):
        try:
            application = Application.builder().token(BOT_TOKEN).build()
            
            application.add_handler(CommandHandler("start", self.welcome))
            application.add_handler(CommandHandler("help", self.welcome))
            application.add_handler(CommandHandler("admin", self.admin_commands))
            application.add_handler(CallbackQueryHandler(self.search_handler))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            application.run_polling()
        except Exception as e:
            logger.error(f"Bot error: {e}")

if __name__ == "__main__":
    bot = ProductSearchBot()
    bot.run()