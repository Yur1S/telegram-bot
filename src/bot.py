from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import pandas as pd
import logging
import asyncio
import os
import sys
import json

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import BOT_TOKEN, ADMIN_USERNAME
from src.scraper import ProductScraper
from src.report_generator import ReportGenerator
from src.user_manager import UserManager

# –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(...)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
file_handler = logging.FileHandler('bot.log', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(file_formatter)

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(levelname)s: %(message)s')
console_handler.setFormatter(console_formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
logger.addHandler(file_handler)
logger.addHandler(console_handler)

WELCOME_MESSAGE = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –ì–ò–°–ü –∏ –ï–ê–≠–°.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
"""

HELP_MESSAGE = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫

–¢–∏–ø—ã –ø–æ–∏—Å–∫–∞:
1. üîç –ü–æ–∏—Å–∫ –ø–æ –û–ö–ü–î2
   - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26.20.11)

2. üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
   - –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–º–ø—å—é—Ç–µ—Ä)

3. üîÑ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
   - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
   - –ü—Ä–∏–º–µ—Ä: 26.20.11, –∫–æ–º–ø—å—é—Ç–µ—Ä

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞:
- üåê –í–µ–∑–¥–µ (–ì–ò–°–ü + –ï–ê–≠–°)
- üìä –ì–ò–°–ü
- üîÑ –ï–ê–≠–°

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin add username - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin remove username - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin list - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/update_gisp - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ì–ò–°–ü
"""

SEARCH_SOURCES = {
    'all': '–í–µ–∑–¥–µ',
    'gisp': '–ì–ò–°–ü',
    'eaeu': '–ï–ê–≠–°'
}


class ProductSearchBot:
    def __init__(self):
        logger.debug("Initializing ProductSearchBot...")
        try:
            self.scraper = ProductScraper()
            self.report_generator = ReportGenerator()
            self.user_manager = UserManager()
            self.active_searches = set()
            self.file_update_status = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            os.makedirs('data', exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not os.path.exists('data/users.json'):
                with open('data/users.json', 'w', encoding='utf-8') as f:
                    json.dump({"admins": [ADMIN_USERNAME], "usernames": []}, f)
            
            if not self.user_manager.is_admin(ADMIN_USERNAME):
                logger.debug(f"Adding {ADMIN_USERNAME} as admin")
                self.user_manager.allowed_users["admins"].append(ADMIN_USERNAME)
                self.user_manager._save_users()
            logger.debug("ProductSearchBot initialized successfully")
        except Exception as e:
            logger.error(f"Error during initialization: {e}", exc_info=True)
            raise

    async def check_access(self, update: Update) -> bool:
        user = update.effective_user
        has_access = self.user_manager.is_allowed(username=user.username)
        logger.debug(f"Access check for {user.username}: {has_access}")
        if not has_access:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        return True

    async def welcome(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.debug(f"Welcome message for user {update.effective_user.username}")
            keyboard = [[KeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                WELCOME_MESSAGE, 
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            logger.debug("Welcome message sent successfully")
        except Exception as e:
            logger.error(f"Error in welcome handler: {e}", exc_info=True)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return
        await update.message.reply_text(HELP_MESSAGE)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            logger.debug(f"Start command from user {update.effective_user.username}")
            if not await self.check_access(update):
                return

            keyboard = [
                [
                    InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –û–ö–ü–î2", callback_data='search_okpd2'),
                    InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é", callback_data='search_name')
                ],
                [InlineKeyboardButton("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data='search_combined')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=reply_markup
            )
            logger.debug("Start command processed successfully")
        except Exception as e:
            logger.error(f"Error in start handler: {e}", exc_info=True)

    async def stop_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            logger.debug(f"Stop search requested for user {update.effective_user.username}")
            
            if user_id in self.active_searches:
                self.active_searches.remove(user_id)
                context.user_data.clear()
                
                # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                reply_markup = ReplyKeyboardRemove()
                await update.message.reply_text(
                    "üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    reply_markup=reply_markup
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
                await self.start(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞"
                )
        except Exception as e:
            logger.error(f"Error in stop_search: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–∏—Å–∫–∞")

    async def update_gisp(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.debug(f"Manual GISP update requested by {user.username}")
        if not self.user_manager.is_admin(user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        status_message = await update.message.reply_text("‚è≥ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ì–ò–°–ü...")
        self.file_update_status = status_message

        try:
            logger.debug("Starting GISP file download process...")
            await status_message.edit_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ì–ò–°–ü...")
            
            total_rows = await self.scraper.download_gisp_file_with_status(status_message)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if not os.path.exists(self.scraper.GISP_FILE_PATH):
                raise Exception("CSV —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                
            if os.path.getsize(self.scraper.GISP_FILE_PATH) == 0:
                raise Exception("CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø—É—Å—Ç")
                
            if total_rows <= 0:
                raise Exception("–ù–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.scraper.TEMP_GISP_FILE
            if os.path.exists(temp_file):
                try:
                    os.remove(temp_file)
                    logger.info("Temporary Excel file removed successfully")
                except Exception as e:
                    logger.warning(f"Failed to remove temporary file: {e}")
            
            logger.debug(f"GISP file download completed, processed {total_rows} rows")
            await status_message.edit_text(
                f"‚úÖ –§–∞–π–ª –ì–ò–°–ü —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows:,}\n"
                f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(self.scraper.GISP_FILE_PATH) / (1024*1024):.1f} MB"
            )
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Manual GISP update error: {error_msg}", exc_info=True)
            await status_message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ì–ò–°–ü:\n"
                f"{error_msg[:200]}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
        finally:
            self.file_update_status = None

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        if update.message.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
            await self.start(update, context)
            return
        
        if update.message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
            await self.stop_search(update, context)
            return

        if 'search_type' not in context.user_data:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return

        search_type = context.user_data['search_type']
        source = context.user_data.get('source', 'all')
        query = update.message.text.strip()
        user_id = update.effective_user.id
        
        if user_id in self.active_searches:
            await update.message.reply_text("üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫.")
            return
            
        self.active_searches.add(user_id)
        
        try:
            status_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫...")
            
            if search_type == 'okpd2':
                results = await self.scraper.search_all(okpd2=query, status_message=status_message)
            elif search_type == 'name':
                results = await self.scraper.search_all(name=query, status_message=status_message)
            elif search_type == 'combined':
                try:
                    okpd2, name = [x.strip() for x in query.split(',', 1)]
                    results = await self.scraper.search_all(okpd2=okpd2, name=name, status_message=status_message)
                except ValueError:
                    await status_message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
                    self.active_searches.remove(user_id)
                    return
            
            if not results:
                await status_message.edit_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.active_searches.remove(user_id)
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∞—Å—Ç—è–º–∏
            chunk_size = 10
            for i in range(0, len(results), chunk_size):
                chunk = results[i:i + chunk_size]
                message = f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—á–∞—Å—Ç—å {i//chunk_size + 1}/{-(-len(results)//chunk_size)}):\n\n"
                for item in chunk:
                    message += (
                        f"üè¢ {item['manufacturer']}\n"
                        f"üì¶ {item['name']}\n"
                        f"üìù –û–ö–ü–î2: {item['okpd2_code']}\n"
                        f"üî¢ –ò–ù–ù: {item['inn']}\n"
                        f"üìã –†–µ–µ—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä: {item['registry_number']}\n"
                        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {item['registry_date']}\n"
                        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {item['valid_until']}\n"
                        f"üåê –ò—Å—Ç–æ—á–Ω–∏–∫: {item['source']}\n"
                        f"{'=' * 30}\n"
                    )
                await update.message.reply_text(message)
                
        except Exception as e:
            logger.error(f"Search error: {e}", exc_info=True)
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        finally:
            self.active_searches.remove(user_id)

    # Add this method to your ProductSearchBot class
    async def admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle admin commands"""
        if not await self.check_access(update):
            return
            
        user = update.effective_user
        if not self.user_manager.is_admin(user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
            
        try:
            command_parts = update.message.text.split()
            if len(command_parts) < 2:
                await update.message.reply_text(
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/admin add username - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "/admin remove username - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "/admin list - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                )
                return
                
            action = command_parts[1].lower()
            
            if action == "list":
                users = self.user_manager.get_all_users()
                admins = users.get("admins", [])
                regular_users = users.get("usernames", [])
                
                message = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
                message += "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
                for admin in admins:
                    message += f"- {admin}\n"
                    
                message += "\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
                for user in regular_users:
                    message += f"- {user}\n"
                    
                await update.message.reply_text(message)
                
            elif action in ["add", "remove"] and len(command_parts) == 3:
                target_username = command_parts[2]
                if action == "add":
                    self.user_manager.add_user(target_username)
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –¥–æ–±–∞–≤–ª–µ–Ω")
                else:
                    self.user_manager.remove_user(target_username)
                    await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É–¥–∞–ª–µ–Ω")
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                
        except Exception as e:
            logger.error(f"Admin command error: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def run(self):
        try:
            logger.info("Starting bot application...")
            application = Application.builder().token(BOT_TOKEN).build()
            
            application.add_handler(CommandHandler("start", self.welcome))
            application.add_handler(CommandHandler("help", self.help))
            application.add_handler(CommandHandler("stop", self.stop_search))
            application.add_handler(CommandHandler("admin", self.admin_commands))
            application.add_handler(CommandHandler("update_gisp", self.update_gisp))
            application.add_handler(CallbackQueryHandler(self.search_handler))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info("Starting polling...")
            application.run_polling()
        except Exception as e:
            logger.error(f"Bot error: {e}")

if __name__ == "__main__":
    logger.info("Main program starting...")
    bot = ProductSearchBot()
    bot.run()