from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import pandas as pd
import logging
import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import BOT_TOKEN, ADMIN_USERNAME
from src.scraper import ProductScraper
from src.report_generator import ReportGenerator
from src.user_manager import UserManager

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

WELCOME_MESSAGE = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö –ì–ò–°–ü –∏ –ï–ê–≠–°.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
"""

HELP_MESSAGE = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫

–¢–∏–ø—ã –ø–æ–∏—Å–∫–∞:
1. üîç –ü–æ–∏—Å–∫ –ø–æ –û–ö–ü–î2
   - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 26.20.11)

2. üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é
   - –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–º–ø—å—é—Ç–µ—Ä)

3. üîÑ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
   - –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
   - –ü—Ä–∏–º–µ—Ä: 26.20.11, –∫–æ–º–ø—å—é—Ç–µ—Ä

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∏—Å–∫–∞:
- üåê –í–µ–∑–¥–µ (–ì–ò–°–ü + –ï–ê–≠–°)
- üìä –ì–ò–°–ü
- üîÑ –ï–ê–≠–°

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin add username - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin remove username - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin list - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/update_gisp - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ì–ò–°–ü
"""

SEARCH_SOURCES = {
    'all': '–í–µ–∑–¥–µ',
    'gisp': '–ì–ò–°–ü',
    'eaeu': '–ï–ê–≠–°'
}

class ProductSearchBot:
    def __init__(self):
        self.scraper = ProductScraper()
        self.report_generator = ReportGenerator()
        self.user_manager = UserManager()
        self.active_searches = set()
        self.file_update_status = None
        
        if not self.user_manager.is_admin(ADMIN_USERNAME):
            self.user_manager.allowed_users["admins"].append(ADMIN_USERNAME)
            self.user_manager._save_users()

    async def check_access(self, update: Update) -> bool:
        user = update.effective_user
        if not self.user_manager.is_allowed(username=user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return False
        return True

    async def welcome(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[KeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=reply_markup)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return
        await update.message.reply_text(HELP_MESSAGE)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –û–ö–ü–î2", callback_data='search_okpd2'),
                InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é", callback_data='search_name')
            ],
            [InlineKeyboardButton("–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data='search_combined')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )

    async def stop_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id in self.active_searches:
            self.active_searches.remove(user_id)
            context.user_data.clear()
            await update.message.reply_text(
                "üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:", 
                reply_markup=ReplyKeyboardRemove()
            )
            await self.start(update, context)
        else:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")

    async def update_gisp(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if not self.user_manager.is_admin(user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        status_message = await update.message.reply_text("‚è≥ –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ì–ò–°–ü...")
        self.file_update_status = status_message

        try:
            await self.scraper.download_gisp_file_with_status(self.file_update_status)
            await status_message.edit_text("‚úÖ –§–∞–π–ª –ì–ò–°–ü —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            logger.error(f"Manual GISP update error: {e}")
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ì–ò–°–ü")
        finally:
            self.file_update_status = None

    async def admin_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if not self.user_manager.is_admin(user.username):
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        command = context.args[0] if context.args else "help"
        if command == "add":
            if len(context.args) < 2:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin add username")
                return
            username = context.args[1]
            self.user_manager.add_user(username=username)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω")
        
        elif command == "remove":
            if len(context.args) < 2:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /admin remove username")
                return
            username = context.args[1]
            self.user_manager.remove_user(username=username)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª–µ–Ω")
        
        elif command == "list":
            users = self.user_manager.allowed_users["usernames"]
            message = "–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(users)
            await update.message.reply_text(message)
        
        else:
            help_text = """
–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin add username - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin remove username - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/admin list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/update_gisp - –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –ì–ò–°–ü
            """
            await update.message.reply_text(help_text)

    async def search_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        query = update.callback_query
        await query.answer()
        
        if query.data.startswith('search_'):
            context.user_data['search_type'] = query.data.replace('search_', '')
            keyboard = [
                [InlineKeyboardButton(name, callback_data=f'source_{key}')]
                for key, name in SEARCH_SOURCES.items()
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)
        elif query.data.startswith('source_'):
            context.user_data['source'] = query.data.replace('source_', '')
            search_type = context.user_data['search_type']
            if search_type == 'okpd2':
                await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2:")
            elif search_type == 'name':
                await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ü–∏–∏:")
            elif search_type == 'combined':
                await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –û–ö–ü–î2 –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self.check_access(update):
            return

        if update.message.text == "üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫":
            await self.start(update, context)
            return
        
        if update.message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
            await self.stop_search(update, context)
            return

        if 'search_type' not in context.user_data:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start")
            return

        search_type = context.user_data['search_type']
        query = update.message.text
        user_id = update.effective_user.id
        
        if user_id in self.active_searches:
            await update.message.reply_text("–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫.")
            return
            
        self.active_searches.add(user_id)

        stop_keyboard = [[KeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")]]
        stop_markup = ReplyKeyboardMarkup(stop_keyboard, resize_keyboard=True)
        
        status_message = await update.message.reply_text(
            "üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n"
            "‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...",
            reply_markup=stop_markup
        )

        try:
            if user_id not in self.active_searches:
                return

            source = context.user_data.get('source', 'all')
            
            if user_id not in self.active_searches:
                return

            if search_type == 'okpd2':
                if source == 'gisp':
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...")
                    results = self.scraper.search_gisp(okpd2=query)
                elif source == 'eaeu':
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ï–ê–≠–°...")
                    results = self.scraper.search_eaeu(okpd2=query)
                else:
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...")
                    gisp_results = self.scraper.search_gisp(okpd2=query)
                    if user_id not in self.active_searches:
                        return
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ï–ê–≠–°...")
                    eaeu_results = self.scraper.search_eaeu(okpd2=query)
                    results = gisp_results + eaeu_results
            elif search_type == 'name':
                if source == 'gisp':
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...")
                    results = self.scraper.search_gisp(name=query)
                elif source == 'eaeu':
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ï–ê–≠–°...")
                    results = self.scraper.search_eaeu(name=query)
                else:
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...")
                    gisp_results = self.scraper.search_gisp(name=query)
                    if user_id not in self.active_searches:
                        return
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ï–ê–≠–°...")
                    eaeu_results = self.scraper.search_eaeu(name=query)
                    results = gisp_results + eaeu_results
            elif search_type == 'combined':
                okpd2, name = [x.strip() for x in query.split(',', 1)]
                if source == 'gisp':
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...")
                    results = self.scraper.search_gisp(okpd2=okpd2, name=name)
                elif source == 'eaeu':
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ï–ê–≠–°...")
                    results = self.scraper.search_eaeu(okpd2=okpd2, name=name)
                else:
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–ò–°–ü...")
                    gisp_results = self.scraper.search_gisp(okpd2=okpd2, name=name)
                    if user_id not in self.active_searches:
                        return
                    await status_message.edit_text("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...\n‚è≥ –ü–æ–∏—Å–∫ –≤ –ï–ê–≠–°...")
                    eaeu_results = self.scraper.search_eaeu(okpd2=okpd2, name=name)
                    results = gisp_results + eaeu_results

            if user_id not in self.active_searches:
                await status_message.delete()
                return

                        if not results:
                await status_message.edit_text(
                    "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=ReplyKeyboardRemove()
                )
                await self.start(update, context)
                return

            await status_message.edit_text("üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
            excel_report = self.report_generator.generate_excel_report(results)
            
            if excel_report and user_id in self.active_searches:
                await status_message.delete()
                await update.message.reply_document(
                    document=excel_report,
                    filename='search_results.xlsx',
                    caption=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}",
                    reply_markup=ReplyKeyboardRemove()
                )
                await self.start(update, context)
            else:
                await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

        except Exception as e:
            logger.error(f"Search error: {e}")
            await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        finally:
            if user_id in self.active_searches:
                self.active_searches.remove(user_id)
            context.user_data.clear()

    def run(self):
        try:
            application = Application.builder().token(BOT_TOKEN).build()
            
            application.add_handler(CommandHandler("start", self.welcome))
            application.add_handler(CommandHandler("help", self.help))
            application.add_handler(CommandHandler("stop", self.stop_search))
            application.add_handler(CommandHandler("admin", self.admin_commands))
            application.add_handler(CommandHandler("update_gisp", self.update_gisp))
            application.add_handler(CallbackQueryHandler(self.search_handler))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            application.run_polling()
        except Exception as e:
            logger.error(f"Bot error: {e}")

if __name__ == "__main__":
    bot = ProductSearchBot()
    bot.run()